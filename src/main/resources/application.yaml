openapi: 3.0.2
info:
    title: revWork
    version: 0.0.2
    description: This is the api specification for the revWork API.
paths:
    /login:
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/usernameandpassword'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: string
                            examples:
                                Login Token Example:
                                    value: xxx.yyyy.zzzz
                    description: The login was a sucess.
    /job:
        get:
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/availablejob'
                    description: The jobs were retrieved successfully.
            description: Get all the jobs that an employer has available.
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/availablejob'
                required: true
            responses:
                '200':
                    description: The job was posted successfully.
            summary: Enter a job to the list
    /apply:
        put:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/application'
                required: true
            responses:
                '200':
                    description: Application has been updated.
            summary: Update an application.
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/application'
                required: true
            responses:
                '201':
                    description: Application has been sent!
            summary: Apply for an available job
    /register/employer:
        post:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/employerregister'
                required: true
            responses:
                '200':
                    description: Employer has been registered.
            summary: Registering as an employer
    /register/freelancer:
        post:
            requestBody:
                description: ''
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/freelancerregister'
                required: true
            responses:
                '200':
                    description: Freelancer has been registered.
            summary: Registering as a freelancer
    /select-application:
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            type: integer
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/application'
                    description: Application found.
            summary: Get a particular application
    /job/id: {}
components:
    schemas:
        usernameandpassword:
            title: Root Type for login
            description: The onbject a user passes to login.
            required:
                - password
                - username
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string
            example:
                username: string
                password: string
        availablejob:
            title: Root Type for availablejob
            description: A job the employer is trying to find a freelancer to complete.
            type: object
            properties:
                id:
                    type: integer
                employerid:
                    $ref: '#/components/schemas/employer'
                name:
                    type: string
                skills:
                    type: string
                description:
                    type: string
                payrate:
                    type: string
                istaken:
                    description: |-
                        True if a job has a freelancer
                        False if a job is stil available
                    type: boolean
            example: |-
                {
                    "id": "integer",
                    "employerid": "employer",
                    "name": "string",
                    "skills": "string",
                    "description": "string",
                    "payrate": "double"
                    "istaken" : boolean
                }
        application:
            title: Root Type for application
            description: ''
            type: object
            properties:
                jobid:
                    type: string
                portfolioid:
                    type: string
                coverletter:
                    type: string
            example:
                jobid: integer
                portfolioid: integer
                coverletter: string
        employerregister:
            title: Root Type for employerregister
            description: ''
            required:
                - companyname
                - email
            type: object
            properties:
                name:
                    type: string
                email:
                    type: string
                username:
                    type: string
                password:
                    type: string
            example:
                name: string
                email: string
                username: string
                password: string
        freelancerregister:
            title: Root Type for freelancerregister
            description: ''
            required:
                - email
                - name
            type: object
            properties:
                name:
                    type: string
                about:
                    type: string
                experiencelevel:
                    type: string
                email:
                    type: string
                username:
                    type: string
                password:
                    type: string
            example: |-
                {
                    "name": "string",
                    "about": "string"
                    "experiencelevel": "string",
                    "email": "string",
                    "username":"string",
                    "password": "string"
                }
        employer:
            title: Root Type for employer
            description: ''
            type: object
            properties:
                id:
                    type: string
                name:
                    type: string
                email:
                    type: string
                username:
                    type: string
                password:
                    type: string
            example:
                id: integer
                name: string
                email: string
                username: string
                password: string
        freelancer:
            title: Root Type for freelancer
            description: ''
            type: object
            properties:
                id:
                    type: integer
                name:
                    type: string
                about:
                    type: string
                experiencelevel:
                    type: string
                email:
                    type: string
                username:
                    type: string
                password:
                    type: string
            example:
                id: integer
                name: string
                about: string
                experiencelevel: string
                email: string
                username: string
                password: string
        portfolio:
            title: Root Type for portfolio
            description: ''
            type: object
            properties:
                id:
                    type: integer
                name:
                    type: string
                email:
                    type: string
                skills:
                    type: string
                college:
                    type: string
                freelancerid:
                    $ref: '#/components/schemas/freelancer'
                    description: ''
            example:
                id: integer
                freelancerid: integer
                name: string
                email: string
                skills: string
                college: string
    securitySchemes:
        revwork_security_schema:
            scheme: bearer
            type: http
security:
    -
        revwork_security_schema: []
